--------------------------------------------------------
--  This file was automatically generated by Ocarina  --
--  Do NOT hand-modify this file, as your             --
--  changes will be lost when you re-run Ocarina      --
--------------------------------------------------------
pragma Style_Checks
 ("NM32766");

with PolyORB_HI.Port_Kinds;
with System;
with PolyORB_HI_Generated.Marshallers;
with PolyORB_HI_Generated.Transport;
with PolyORB_HI.Thread_Interrogators;
pragma Elaborate_All (PolyORB_HI.Thread_Interrogators);
with PolyORB_HI_Generated.Subprograms;
with radar;

package body PolyORB_HI_Generated.Activity is

  --  BEGIN: Data types used by all instances of component receiver.impl

  type radar_system_receiver_impl_Integer_Array is
   array (radar_system_receiver_impl_Port_Type)
     of Standard.Integer;

  type radar_system_receiver_impl_Port_Kind_Array is
   array (radar_system_receiver_impl_Port_Type)
     of PolyORB_HI.Port_Kinds.Port_Kind;

  subtype UT_Activity_Main_1_Max_Port_Image_Size is
   Integer range 1 .. PolyORB_HI_Generated.Deployment.Max_Port_Image_Size;

  subtype UT_Activity_Main_radar_system_receiver_impl_Port_Image_Array_Component is
   Standard.String
     (UT_Activity_Main_1_Max_Port_Image_Size);

  type radar_system_receiver_impl_Port_Image_Array is
   array (radar_system_receiver_impl_Port_Type)
     of UT_Activity_Main_radar_system_receiver_impl_Port_Image_Array_Component;

  type radar_system_receiver_impl_Address_Array is
   array (radar_system_receiver_impl_Port_Type)
     of System.Address;

  type radar_system_receiver_impl_Overflow_Protocol_Array is
   array (radar_system_receiver_impl_Port_Type)
     of PolyORB_HI.Port_Kinds.Overflow_Handling_Protocol;

  --  END: Data types used by all instances of component receiver.impl

  radar_system_receive_Port_Kinds : constant radar_system_receiver_impl_Port_Kind_Array :=
   (receiver_out =>
     PolyORB_HI.Port_Kinds.Out_Data_Port,
    receiver_in =>
     PolyORB_HI.Port_Kinds.In_Data_Port);

  radar_system_receive_Port_Images : constant radar_system_receiver_impl_Port_Image_Array :=
   (receiver_out =>
     PolyORB_HI_Generated.Deployment.Port_Image
       (PolyORB_HI_Generated.Deployment.main_receive_receiver_out_K),
    receiver_in =>
     PolyORB_HI_Generated.Deployment.Port_Image
       (PolyORB_HI_Generated.Deployment.main_receive_receiver_in_K));

  radar_system_receive_FIFO_Sizes : constant radar_system_receiver_impl_Integer_Array :=
   (receiver_out =>
     -1,
    receiver_in =>
     1);

  radar_system_receive_Offsets : constant radar_system_receiver_impl_Integer_Array :=
   (receiver_out =>
     0,
    receiver_in =>
     1);

  radar_system_receive_Overflow_Protocols : constant radar_system_receiver_impl_Overflow_Protocol_Array :=
   (receiver_out =>
     PolyORB_HI.Port_Kinds.Dropoldest,
    receiver_in =>
     PolyORB_HI.Port_Kinds.Dropoldest);

  radar_system_receive_Urgencies : constant radar_system_receiver_impl_Integer_Array :=
   (receiver_out =>
     0,
    receiver_in =>
     0);

  radar_system_receive_Total_FIFO_Size : constant Standard.Integer :=
   1;

  type UT_Activity_Main_receive_receiver_out_Destinations_Array is
   array (Standard.Positive range <>)
     of PolyORB_HI_Generated.Deployment.Port_Type;

  receive_receiver_out_Destinations : constant UT_Activity_Main_receive_receiver_out_Destinations_Array :=
   UT_Activity_Main_receive_receiver_out_Destinations_Array'
     (1 =>
       PolyORB_HI_Generated.Deployment.main_analyse_from_receiver_K);

  radar_system_receive_N_Destinations : constant radar_system_receiver_impl_Integer_Array :=
   (receiver_out =>
     1,
    receiver_in =>
     0);

  receive_Destinations : constant radar_system_receiver_impl_Address_Array :=
   (receiver_out =>
     receive_receiver_out_Destinations'Address,
    receiver_in =>
     System.null_Address);

  package radar_system_receive_Interrogators is
   new PolyORB_HI.Thread_Interrogators
     (Port_Type => radar_system_receiver_impl_Port_Type,
      Integer_Array => radar_system_receiver_impl_Integer_Array,
      Port_Kind_Array => radar_system_receiver_impl_Port_Kind_Array,
      Port_Image_Array => radar_system_receiver_impl_Port_Image_Array,
      Address_Array => radar_system_receiver_impl_Address_Array,
      Overflow_Protocol_Array => radar_system_receiver_impl_Overflow_Protocol_Array,
      Thread_Interface_Type => radar_system_receiver_impl_Interface,
      Current_Entity => PolyORB_HI_Generated.Deployment.main_receive_K,
      Thread_Port_Kinds => radar_system_receive_Port_Kinds,
      Has_Event_Ports => False,
      Thread_Port_Images => radar_system_receive_Port_Images,
      Thread_Fifo_Sizes => radar_system_receive_FIFO_Sizes,
      Thread_Fifo_Offsets => radar_system_receive_Offsets,
      Thread_Overflow_Protocols => radar_system_receive_Overflow_Protocols,
      Urgencies => radar_system_receive_Urgencies,
      Global_Data_Queue_Size => radar_system_receive_Total_FIFO_Size,
      N_Destinations => radar_system_receive_N_Destinations,
      Destinations => receive_Destinations,
      Marshall => PolyORB_HI_Generated.Marshallers.Marshall,
      Send => PolyORB_HI_Generated.Transport.Send,
      Next_Deadline => radar_system_receive_Task.Next_Deadline);

  --  Periodic task : receive

  ------------------------------
  -- radar_system_receive_Job -- 
  ------------------------------

  function radar_system_receive_Job return PolyORB_HI.Errors.Error_Kind is
    receiver_in_V : PolyORB_HI_Generated.Types.Target_Distance;
    receiver_out_V : PolyORB_HI_Generated.Types.Target_Distance;
    Error_Ü : PolyORB_HI.Errors.Error_Kind;
    use type PolyORB_HI.Errors.Error_Kind;
  begin
    --  Get the IN port values
    if (radar_system_receive_Interrogators.Get_Count
     (receiver_in)
      /= -1)
    then
      receiver_in_V :=
       radar_system_receive_Interrogators.Get_Value
         (receiver_in).receiver_in_DATA;
    else
      receiver_in_V :=
       PolyORB_HI_Generated.Types.Target_Distance_Default_Value;
    end if;
    --  Call implementation
    PolyORB_HI_Generated.Subprograms.radar_system_Receiver_Spg
     (receiver_out => receiver_out_V,
      receiver_in => receiver_in_V);
    --  Set the call sequence OUT port values
    radar_system_receive_Interrogators.Put_Value
     (radar_system_receiver_impl_Interface'
       (Port => receiver_out,
        receiver_out_DATA => receiver_out_V));
    --  Send the call sequence OUT port values
    Error_Ü :=
     radar_system_receive_Interrogators.Send_Output
       (receiver_out);
    if (Error_Ü
      /= PolyORB_HI.Errors.Error_None)
    then
      return Error_Ü;
    end if;
    --  Return error code
    return Error_Ü;
  end radar_system_receive_Job;

  --  BEGIN: Data types used by all instances of component analyser.impl

  type radar_system_analyser_impl_Integer_Array is
   array (radar_system_analyser_impl_Port_Type)
     of Standard.Integer;

  type radar_system_analyser_impl_Port_Kind_Array is
   array (radar_system_analyser_impl_Port_Type)
     of PolyORB_HI.Port_Kinds.Port_Kind;

  subtype UT_Activity_Main_radar_system_analyser_impl_Port_Image_Array_Component is
   Standard.String
     (UT_Activity_Main_1_Max_Port_Image_Size);

  type radar_system_analyser_impl_Port_Image_Array is
   array (radar_system_analyser_impl_Port_Type)
     of UT_Activity_Main_radar_system_analyser_impl_Port_Image_Array_Component;

  type radar_system_analyser_impl_Address_Array is
   array (radar_system_analyser_impl_Port_Type)
     of System.Address;

  type radar_system_analyser_impl_Overflow_Protocol_Array is
   array (radar_system_analyser_impl_Port_Type)
     of PolyORB_HI.Port_Kinds.Overflow_Handling_Protocol;

  --  END: Data types used by all instances of component analyser.impl

  radar_system_analyse_Port_Kinds : constant radar_system_analyser_impl_Port_Kind_Array :=
   (from_transmitter =>
     PolyORB_HI.Port_Kinds.In_Event_Port,
    from_receiver =>
     PolyORB_HI.Port_Kinds.In_Data_Port,
    analyser_out =>
     PolyORB_HI.Port_Kinds.Out_Data_Port,
    from_controller =>
     PolyORB_HI.Port_Kinds.In_Data_Port);

  radar_system_analyse_Port_Images : constant radar_system_analyser_impl_Port_Image_Array :=
   (from_transmitter =>
     PolyORB_HI_Generated.Deployment.Port_Image
       (PolyORB_HI_Generated.Deployment.main_analyse_from_transmitter_K),
    from_receiver =>
     PolyORB_HI_Generated.Deployment.Port_Image
       (PolyORB_HI_Generated.Deployment.main_analyse_from_receiver_K),
    analyser_out =>
     PolyORB_HI_Generated.Deployment.Port_Image
       (PolyORB_HI_Generated.Deployment.main_analyse_analyser_out_K),
    from_controller =>
     PolyORB_HI_Generated.Deployment.Port_Image
       (PolyORB_HI_Generated.Deployment.main_analyse_from_controller_K));

  radar_system_analyse_FIFO_Sizes : constant radar_system_analyser_impl_Integer_Array :=
   (from_transmitter =>
     16,
    from_receiver =>
     1,
    analyser_out =>
     -1,
    from_controller =>
     1);

  radar_system_analyse_Offsets : constant radar_system_analyser_impl_Integer_Array :=
   (from_transmitter =>
     1,
    from_receiver =>
     17,
    analyser_out =>
     0,
    from_controller =>
     18);

  radar_system_analyse_Overflow_Protocols : constant radar_system_analyser_impl_Overflow_Protocol_Array :=
   (from_transmitter =>
     PolyORB_HI.Port_Kinds.Dropoldest,
    from_receiver =>
     PolyORB_HI.Port_Kinds.Dropoldest,
    analyser_out =>
     PolyORB_HI.Port_Kinds.Dropoldest,
    from_controller =>
     PolyORB_HI.Port_Kinds.Dropoldest);

  radar_system_analyse_Urgencies : constant radar_system_analyser_impl_Integer_Array :=
   (from_transmitter =>
     0,
    from_receiver =>
     0,
    analyser_out =>
     0,
    from_controller =>
     0);

  radar_system_analyse_Total_FIFO_Size : constant Standard.Integer :=
   18;

  type UT_Activity_Main_analyse_analyser_out_Destinations_Array is
   array (Standard.Positive range <>)
     of PolyORB_HI_Generated.Deployment.Port_Type;

  analyse_analyser_out_Destinations : constant UT_Activity_Main_analyse_analyser_out_Destinations_Array :=
   UT_Activity_Main_analyse_analyser_out_Destinations_Array'
     (1 =>
       PolyORB_HI_Generated.Deployment.main_display_display_in_K);

  radar_system_analyse_N_Destinations : constant radar_system_analyser_impl_Integer_Array :=
   (from_transmitter =>
     0,
    from_receiver =>
     0,
    analyser_out =>
     1,
    from_controller =>
     0);

  analyse_Destinations : constant radar_system_analyser_impl_Address_Array :=
   (from_transmitter =>
     System.null_Address,
    from_receiver =>
     System.null_Address,
    analyser_out =>
     analyse_analyser_out_Destinations'Address,
    from_controller =>
     System.null_Address);

  package radar_system_analyse_Interrogators is
   new PolyORB_HI.Thread_Interrogators
     (Port_Type => radar_system_analyser_impl_Port_Type,
      Integer_Array => radar_system_analyser_impl_Integer_Array,
      Port_Kind_Array => radar_system_analyser_impl_Port_Kind_Array,
      Port_Image_Array => radar_system_analyser_impl_Port_Image_Array,
      Address_Array => radar_system_analyser_impl_Address_Array,
      Overflow_Protocol_Array => radar_system_analyser_impl_Overflow_Protocol_Array,
      Thread_Interface_Type => radar_system_analyser_impl_Interface,
      Current_Entity => PolyORB_HI_Generated.Deployment.main_analyse_K,
      Thread_Port_Kinds => radar_system_analyse_Port_Kinds,
      Has_Event_Ports => True,
      Thread_Port_Images => radar_system_analyse_Port_Images,
      Thread_Fifo_Sizes => radar_system_analyse_FIFO_Sizes,
      Thread_Fifo_Offsets => radar_system_analyse_Offsets,
      Thread_Overflow_Protocols => radar_system_analyse_Overflow_Protocols,
      Urgencies => radar_system_analyse_Urgencies,
      Global_Data_Queue_Size => radar_system_analyse_Total_FIFO_Size,
      N_Destinations => radar_system_analyse_N_Destinations,
      Destinations => analyse_Destinations,
      Marshall => PolyORB_HI_Generated.Marshallers.Marshall,
      Send => PolyORB_HI_Generated.Transport.Send,
      Next_Deadline => radar_system_analyse_Task.Next_Deadline);

  --  Periodic task : analyse

  ------------------------------
  -- radar_system_analyse_Job -- 
  ------------------------------

  function radar_system_analyse_Job return PolyORB_HI.Errors.Error_Kind is
    from_receiver_V : PolyORB_HI_Generated.Types.Target_Distance;
    from_controller_V : PolyORB_HI_Generated.Types.Motor_Position;
    analyser_out_V : PolyORB_HI_Generated.Types.Target_Position_impl;
    Error_Ü : PolyORB_HI.Errors.Error_Kind;
    use type PolyORB_HI.Errors.Error_Kind;
  begin
    --  Get the IN port values
    if (radar_system_analyse_Interrogators.Get_Count
     (from_receiver)
      /= -1)
    then
      from_receiver_V :=
       radar_system_analyse_Interrogators.Get_Value
         (from_receiver).from_receiver_DATA;
    else
      from_receiver_V :=
       PolyORB_HI_Generated.Types.Target_Distance_Default_Value;
    end if;
    if (radar_system_analyse_Interrogators.Get_Count
     (from_controller)
      /= -1)
    then
      from_controller_V :=
       radar_system_analyse_Interrogators.Get_Value
         (from_controller).from_controller_DATA;
    else
      from_controller_V :=
       PolyORB_HI_Generated.Types.Motor_Position_Default_Value;
    end if;
    --  Dequeue the IN port values
    radar_system_analyse_Interrogators.Next_Value
     (radar_system_analyser_impl_Port_Type'
       (from_transmitter));
    --  Call implementation
    PolyORB_HI_Generated.Subprograms.radar_system_Analyser_Spg
     (from_receiver => from_receiver_V,
      analyser_out => analyser_out_V,
      from_controller => from_controller_V);
    --  Set the call sequence OUT port values
    radar_system_analyse_Interrogators.Put_Value
     (radar_system_analyser_impl_Interface'
       (Port => analyser_out,
        analyser_out_DATA => analyser_out_V));
    --  Send the call sequence OUT port values
    Error_Ü :=
     radar_system_analyse_Interrogators.Send_Output
       (analyser_out);
    if (Error_Ü
      /= PolyORB_HI.Errors.Error_None)
    then
      return Error_Ü;
    end if;
    --  Return error code
    return Error_Ü;
  end radar_system_analyse_Job;

  --  BEGIN: Data types used by all instances of component display_panel.impl

  type radar_system_display_panel_impl_Integer_Array is
   array (radar_system_display_panel_impl_Port_Type)
     of Standard.Integer;

  type radar_system_display_panel_impl_Port_Kind_Array is
   array (radar_system_display_panel_impl_Port_Type)
     of PolyORB_HI.Port_Kinds.Port_Kind;

  subtype UT_Activity_Main_radar_system_display_panel_impl_Port_Image_Array_Component is
   Standard.String
     (UT_Activity_Main_1_Max_Port_Image_Size);

  type radar_system_display_panel_impl_Port_Image_Array is
   array (radar_system_display_panel_impl_Port_Type)
     of UT_Activity_Main_radar_system_display_panel_impl_Port_Image_Array_Component;

  type radar_system_display_panel_impl_Address_Array is
   array (radar_system_display_panel_impl_Port_Type)
     of System.Address;

  type radar_system_display_panel_impl_Overflow_Protocol_Array is
   array (radar_system_display_panel_impl_Port_Type)
     of PolyORB_HI.Port_Kinds.Overflow_Handling_Protocol;

  --  END: Data types used by all instances of component display_panel.impl

  radar_system_display_Port_Kinds : constant radar_system_display_panel_impl_Port_Kind_Array :=
   (display_in =>
     PolyORB_HI.Port_Kinds.In_Data_Port,
    display_out =>
     PolyORB_HI.Port_Kinds.Out_Event_Port);

  radar_system_display_Port_Images : constant radar_system_display_panel_impl_Port_Image_Array :=
   (display_in =>
     PolyORB_HI_Generated.Deployment.Port_Image
       (PolyORB_HI_Generated.Deployment.main_display_display_in_K),
    display_out =>
     PolyORB_HI_Generated.Deployment.Port_Image
       (PolyORB_HI_Generated.Deployment.main_display_display_out_K));

  radar_system_display_FIFO_Sizes : constant radar_system_display_panel_impl_Integer_Array :=
   (display_in =>
     1,
    display_out =>
     -1);

  radar_system_display_Offsets : constant radar_system_display_panel_impl_Integer_Array :=
   (display_in =>
     1,
    display_out =>
     0);

  radar_system_display_Overflow_Protocols : constant radar_system_display_panel_impl_Overflow_Protocol_Array :=
   (display_in =>
     PolyORB_HI.Port_Kinds.Dropoldest,
    display_out =>
     PolyORB_HI.Port_Kinds.Dropoldest);

  radar_system_display_Urgencies : constant radar_system_display_panel_impl_Integer_Array :=
   (display_in =>
     0,
    display_out =>
     0);

  radar_system_display_Total_FIFO_Size : constant Standard.Integer :=
   1;

  radar_system_display_N_Destinations : constant radar_system_display_panel_impl_Integer_Array :=
   (display_in =>
     0,
    display_out =>
     0);

  display_Destinations : constant radar_system_display_panel_impl_Address_Array :=
   (display_in =>
     System.null_Address,
    display_out =>
     System.null_Address);

  package radar_system_display_Interrogators is
   new PolyORB_HI.Thread_Interrogators
     (Port_Type => radar_system_display_panel_impl_Port_Type,
      Integer_Array => radar_system_display_panel_impl_Integer_Array,
      Port_Kind_Array => radar_system_display_panel_impl_Port_Kind_Array,
      Port_Image_Array => radar_system_display_panel_impl_Port_Image_Array,
      Address_Array => radar_system_display_panel_impl_Address_Array,
      Overflow_Protocol_Array => radar_system_display_panel_impl_Overflow_Protocol_Array,
      Thread_Interface_Type => radar_system_display_panel_impl_Interface,
      Current_Entity => PolyORB_HI_Generated.Deployment.main_display_K,
      Thread_Port_Kinds => radar_system_display_Port_Kinds,
      Has_Event_Ports => True,
      Thread_Port_Images => radar_system_display_Port_Images,
      Thread_Fifo_Sizes => radar_system_display_FIFO_Sizes,
      Thread_Fifo_Offsets => radar_system_display_Offsets,
      Thread_Overflow_Protocols => radar_system_display_Overflow_Protocols,
      Urgencies => radar_system_display_Urgencies,
      Global_Data_Queue_Size => radar_system_display_Total_FIFO_Size,
      N_Destinations => radar_system_display_N_Destinations,
      Destinations => display_Destinations,
      Marshall => PolyORB_HI_Generated.Marshallers.Marshall,
      Send => PolyORB_HI_Generated.Transport.Send,
      Next_Deadline => radar_system_display_Task.Next_Deadline);

  --  Periodic task : display

  ------------------------------
  -- radar_system_display_Job -- 
  ------------------------------

  function radar_system_display_Job return PolyORB_HI.Errors.Error_Kind is
    display_in_V : PolyORB_HI_Generated.Types.Target_Position_impl;
    Error_Ü : constant PolyORB_HI.Errors.Error_Kind :=
     PolyORB_HI.Errors.Error_None;
    use type PolyORB_HI.Errors.Error_Kind;
  begin
    --  Get the IN port values
    if (radar_system_display_Interrogators.Get_Count
     (display_in)
      /= -1)
    then
      display_in_V :=
       radar_system_display_Interrogators.Get_Value
         (display_in).display_in_DATA;
    else
      display_in_V :=
       PolyORB_HI_Generated.Types.Target_Position_impl_Default_Value;
    end if;
    --  Call implementation
    PolyORB_HI_Generated.Subprograms.radar_system_Display_Spg
     (display_in => display_in_V);
    --  Return error code
    return Error_Ü;
  end radar_system_display_Job;

  --  BEGIN: Data types used by all instances of component transmitter.impl

  type radar_system_transmitter_impl_Integer_Array is
   array (radar_system_transmitter_impl_Port_Type)
     of Standard.Integer;

  type radar_system_transmitter_impl_Port_Kind_Array is
   array (radar_system_transmitter_impl_Port_Type)
     of PolyORB_HI.Port_Kinds.Port_Kind;

  subtype UT_Activity_Main_radar_system_transmitter_impl_Port_Image_Array_Component is
   Standard.String
     (UT_Activity_Main_1_Max_Port_Image_Size);

  type radar_system_transmitter_impl_Port_Image_Array is
   array (radar_system_transmitter_impl_Port_Type)
     of UT_Activity_Main_radar_system_transmitter_impl_Port_Image_Array_Component;

  type radar_system_transmitter_impl_Address_Array is
   array (radar_system_transmitter_impl_Port_Type)
     of System.Address;

  type radar_system_transmitter_impl_Overflow_Protocol_Array is
   array (radar_system_transmitter_impl_Port_Type)
     of PolyORB_HI.Port_Kinds.Overflow_Handling_Protocol;

  --  END: Data types used by all instances of component transmitter.impl

  radar_system_transmit_Port_Kinds : constant radar_system_transmitter_impl_Port_Kind_Array :=
   (transmitter_out =>
     PolyORB_HI.Port_Kinds.Out_Event_Port);

  radar_system_transmit_Port_Images : constant radar_system_transmitter_impl_Port_Image_Array :=
   (transmitter_out =>
     PolyORB_HI_Generated.Deployment.Port_Image
       (PolyORB_HI_Generated.Deployment.main_transmit_transmitter_out_K));

  radar_system_transmit_FIFO_Sizes : constant radar_system_transmitter_impl_Integer_Array :=
   (transmitter_out =>
     -1);

  radar_system_transmit_Offsets : constant radar_system_transmitter_impl_Integer_Array :=
   (transmitter_out =>
     0);

  radar_system_transmit_Overflow_Protocols : constant radar_system_transmitter_impl_Overflow_Protocol_Array :=
   (transmitter_out =>
     PolyORB_HI.Port_Kinds.Dropoldest);

  radar_system_transmit_Urgencies : constant radar_system_transmitter_impl_Integer_Array :=
   (transmitter_out =>
     0);

  radar_system_transmit_Total_FIFO_Size : constant Standard.Integer :=
   0;

  type UT_Activity_Main_transmit_transmitter_out_Destinations_Array is
   array (Standard.Positive range <>)
     of PolyORB_HI_Generated.Deployment.Port_Type;

  transmit_transmitter_out_Destinations : constant UT_Activity_Main_transmit_transmitter_out_Destinations_Array :=
   UT_Activity_Main_transmit_transmitter_out_Destinations_Array'
     (1 =>
       PolyORB_HI_Generated.Deployment.main_analyse_from_transmitter_K);

  radar_system_transmit_N_Destinations : constant radar_system_transmitter_impl_Integer_Array :=
   (transmitter_out =>
     2);

  transmit_Destinations : constant radar_system_transmitter_impl_Address_Array :=
   (transmitter_out =>
     transmit_transmitter_out_Destinations'Address);

  package radar_system_transmit_Interrogators is
   new PolyORB_HI.Thread_Interrogators
     (Port_Type => radar_system_transmitter_impl_Port_Type,
      Integer_Array => radar_system_transmitter_impl_Integer_Array,
      Port_Kind_Array => radar_system_transmitter_impl_Port_Kind_Array,
      Port_Image_Array => radar_system_transmitter_impl_Port_Image_Array,
      Address_Array => radar_system_transmitter_impl_Address_Array,
      Overflow_Protocol_Array => radar_system_transmitter_impl_Overflow_Protocol_Array,
      Thread_Interface_Type => radar_system_transmitter_impl_Interface,
      Current_Entity => PolyORB_HI_Generated.Deployment.main_transmit_K,
      Thread_Port_Kinds => radar_system_transmit_Port_Kinds,
      Has_Event_Ports => True,
      Thread_Port_Images => radar_system_transmit_Port_Images,
      Thread_Fifo_Sizes => radar_system_transmit_FIFO_Sizes,
      Thread_Fifo_Offsets => radar_system_transmit_Offsets,
      Thread_Overflow_Protocols => radar_system_transmit_Overflow_Protocols,
      Urgencies => radar_system_transmit_Urgencies,
      Global_Data_Queue_Size => radar_system_transmit_Total_FIFO_Size,
      N_Destinations => radar_system_transmit_N_Destinations,
      Destinations => transmit_Destinations,
      Marshall => PolyORB_HI_Generated.Marshallers.Marshall,
      Send => PolyORB_HI_Generated.Transport.Send,
      Next_Deadline => radar_system_transmit_Task.Next_Deadline);

  --  Periodic task : transmit

  -------------------------------
  -- radar_system_transmit_Job -- 
  -------------------------------

  function radar_system_transmit_Job return PolyORB_HI.Errors.Error_Kind is
    Error_Ü : PolyORB_HI.Errors.Error_Kind;
    use type PolyORB_HI.Errors.Error_Kind;
  begin
    --  Call the thread compute entrypoint
    radar.transmitter
     (PolyORB_HI_Generated.Deployment.main_transmit_K);
    --  Set the OUT port values
    --  Send the OUT ports
    Error_Ü :=
     radar_system_transmit_Interrogators.Send_Output
       (transmitter_out);
    if (Error_Ü
      /= PolyORB_HI.Errors.Error_None)
    then
      return Error_Ü;
    end if;
    --  Return error code
    return Error_Ü;
  end radar_system_transmit_Job;

  --  BEGIN: Data types used by all instances of component controller.impl

  type radar_system_controller_impl_Integer_Array is
   array (radar_system_controller_impl_Port_Type)
     of Standard.Integer;

  type radar_system_controller_impl_Port_Kind_Array is
   array (radar_system_controller_impl_Port_Type)
     of PolyORB_HI.Port_Kinds.Port_Kind;

  subtype UT_Activity_Main_radar_system_controller_impl_Port_Image_Array_Component is
   Standard.String
     (UT_Activity_Main_1_Max_Port_Image_Size);

  type radar_system_controller_impl_Port_Image_Array is
   array (radar_system_controller_impl_Port_Type)
     of UT_Activity_Main_radar_system_controller_impl_Port_Image_Array_Component;

  type radar_system_controller_impl_Address_Array is
   array (radar_system_controller_impl_Port_Type)
     of System.Address;

  type radar_system_controller_impl_Overflow_Protocol_Array is
   array (radar_system_controller_impl_Port_Type)
     of PolyORB_HI.Port_Kinds.Overflow_Handling_Protocol;

  --  END: Data types used by all instances of component controller.impl

  radar_system_control_angle_Port_Kinds : constant radar_system_controller_impl_Port_Kind_Array :=
   (controller_in =>
     PolyORB_HI.Port_Kinds.In_Data_Port,
    controller_out =>
     PolyORB_HI.Port_Kinds.Out_Data_Port);

  radar_system_control_angle_Port_Images : constant radar_system_controller_impl_Port_Image_Array :=
   (controller_in =>
     PolyORB_HI_Generated.Deployment.Port_Image
       (PolyORB_HI_Generated.Deployment.main_control_angle_controller_in_K),
    controller_out =>
     PolyORB_HI_Generated.Deployment.Port_Image
       (PolyORB_HI_Generated.Deployment.main_control_angle_controller_out_K));

  radar_system_control_angle_FIFO_Sizes : constant radar_system_controller_impl_Integer_Array :=
   (controller_in =>
     1,
    controller_out =>
     -1);

  radar_system_control_angle_Offsets : constant radar_system_controller_impl_Integer_Array :=
   (controller_in =>
     1,
    controller_out =>
     0);

  radar_system_control_angle_Overflow_Protocols : constant radar_system_controller_impl_Overflow_Protocol_Array :=
   (controller_in =>
     PolyORB_HI.Port_Kinds.Dropoldest,
    controller_out =>
     PolyORB_HI.Port_Kinds.Dropoldest);

  radar_system_control_angle_Urgencies : constant radar_system_controller_impl_Integer_Array :=
   (controller_in =>
     0,
    controller_out =>
     0);

  radar_system_control_angle_Total_FIFO_Size : constant Standard.Integer :=
   1;

  type UT_Activity_Main_control_angle_controller_out_Destinations_Array is
   array (Standard.Positive range <>)
     of PolyORB_HI_Generated.Deployment.Port_Type;

  control_angle_controller_out_Destinations : constant UT_Activity_Main_control_angle_controller_out_Destinations_Array :=
   UT_Activity_Main_control_angle_controller_out_Destinations_Array'
     (1 =>
       PolyORB_HI_Generated.Deployment.main_analyse_from_controller_K);

  radar_system_control_angle_N_Destinations : constant radar_system_controller_impl_Integer_Array :=
   (controller_in =>
     0,
    controller_out =>
     1);

  control_angle_Destinations : constant radar_system_controller_impl_Address_Array :=
   (controller_in =>
     System.null_Address,
    controller_out =>
     control_angle_controller_out_Destinations'Address);

  package radar_system_control_angle_Interrogators is
   new PolyORB_HI.Thread_Interrogators
     (Port_Type => radar_system_controller_impl_Port_Type,
      Integer_Array => radar_system_controller_impl_Integer_Array,
      Port_Kind_Array => radar_system_controller_impl_Port_Kind_Array,
      Port_Image_Array => radar_system_controller_impl_Port_Image_Array,
      Address_Array => radar_system_controller_impl_Address_Array,
      Overflow_Protocol_Array => radar_system_controller_impl_Overflow_Protocol_Array,
      Thread_Interface_Type => radar_system_controller_impl_Interface,
      Current_Entity => PolyORB_HI_Generated.Deployment.main_control_angle_K,
      Thread_Port_Kinds => radar_system_control_angle_Port_Kinds,
      Has_Event_Ports => False,
      Thread_Port_Images => radar_system_control_angle_Port_Images,
      Thread_Fifo_Sizes => radar_system_control_angle_FIFO_Sizes,
      Thread_Fifo_Offsets => radar_system_control_angle_Offsets,
      Thread_Overflow_Protocols => radar_system_control_angle_Overflow_Protocols,
      Urgencies => radar_system_control_angle_Urgencies,
      Global_Data_Queue_Size => radar_system_control_angle_Total_FIFO_Size,
      N_Destinations => radar_system_control_angle_N_Destinations,
      Destinations => control_angle_Destinations,
      Marshall => PolyORB_HI_Generated.Marshallers.Marshall,
      Send => PolyORB_HI_Generated.Transport.Send,
      Next_Deadline => radar_system_control_angle_Task.Next_Deadline);

  --  Periodic task : control_angle

  ------------------------------------
  -- radar_system_control_angle_Job -- 
  ------------------------------------

  function radar_system_control_angle_Job return PolyORB_HI.Errors.Error_Kind is
    controller_in_V : PolyORB_HI_Generated.Types.Motor_Position;
    controller_out_V : PolyORB_HI_Generated.Types.Motor_Position;
    Error_Ü : PolyORB_HI.Errors.Error_Kind;
    use type PolyORB_HI.Errors.Error_Kind;
  begin
    --  Get the IN port values
    if (radar_system_control_angle_Interrogators.Get_Count
     (controller_in)
      /= -1)
    then
      controller_in_V :=
       radar_system_control_angle_Interrogators.Get_Value
         (controller_in).controller_in_DATA;
    else
      controller_in_V :=
       PolyORB_HI_Generated.Types.Motor_Position_Default_Value;
    end if;
    --  Call implementation
    PolyORB_HI_Generated.Subprograms.radar_system_Controller_Spg
     (controller_in => controller_in_V,
      controller_out => controller_out_V);
    --  Set the call sequence OUT port values
    radar_system_control_angle_Interrogators.Put_Value
     (radar_system_controller_impl_Interface'
       (Port => controller_out,
        controller_out_DATA => controller_out_V));
    --  Send the call sequence OUT port values
    Error_Ü :=
     radar_system_control_angle_Interrogators.Send_Output
       (controller_out);
    if (Error_Ü
      /= PolyORB_HI.Errors.Error_None)
    then
      return Error_Ü;
    end if;
    --  Return error code
    return Error_Ü;
  end radar_system_control_angle_Job;

  -----------------
  -- Send_Output -- 
  -----------------

  function Send_Output
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : radar_system_receiver_impl_Port_Type)
   return PolyORB_HI.Errors.Error_Kind
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    return radar_system_receive_Interrogators.Send_Output
     (Port);
  end Send_Output;

  ---------------
  -- Put_Value -- 
  ---------------

  procedure Put_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Thread_Interface : radar_system_receiver_impl_Interface)
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    radar_system_receive_Interrogators.Put_Value
     (Thread_Interface);
  end Put_Value;

  -------------------
  -- Receive_Input -- 
  -------------------

  procedure Receive_Input
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : radar_system_receiver_impl_Port_Type)
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    radar_system_receive_Interrogators.Receive_Input
     (Port);
  end Receive_Input;

  ---------------
  -- Get_Value -- 
  ---------------

  function Get_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : radar_system_receiver_impl_Port_Type)
   return radar_system_receiver_impl_Interface
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    pragma Warnings
     (Off,
      "*return*");
    return radar_system_receive_Interrogators.Get_Value
     (Port);
    pragma Warnings
     (On,
      "*return*");
  end Get_Value;

  ----------------
  -- Get_Sender -- 
  ----------------

  function Get_Sender
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : radar_system_receiver_impl_Port_Type)
   return PolyORB_HI_Generated.Deployment.Entity_Type
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    pragma Warnings
     (Off,
      "*return*");
    return radar_system_receive_Interrogators.Get_Sender
     (Port);
    pragma Warnings
     (On,
      "*return*");
  end Get_Sender;

  ---------------
  -- Get_Count -- 
  ---------------

  function Get_Count
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : radar_system_receiver_impl_Port_Type)
   return Standard.Integer
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    pragma Warnings
     (Off,
      "*return*");
    return radar_system_receive_Interrogators.Get_Count
     (Port);
    pragma Warnings
     (On,
      "*return*");
  end Get_Count;

  --------------------
  -- Get_Time_Stamp -- 
  --------------------

  function Get_Time_Stamp
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : radar_system_receiver_impl_Port_Type)
   return Ada.Real_Time.Time
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    pragma Warnings
     (Off,
      "*return*");
    return radar_system_receive_Interrogators.Get_Time_Stamp
     (Port);
    pragma Warnings
     (On,
      "*return*");
  end Get_Time_Stamp;

  ----------------
  -- Next_Value -- 
  ----------------

  procedure Next_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : radar_system_receiver_impl_Port_Type)
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    radar_system_receive_Interrogators.Next_Value
     (Port);
  end Next_Value;

  ----------------------------
  -- Store_Received_Message -- 
  ----------------------------

  procedure Store_Received_Message
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Thread_Interface : radar_system_receiver_impl_Interface;
    From : PolyORB_HI_Generated.Deployment.Entity_Type;
    Time_Stamp : Ada.Real_Time.Time :=
      Ada.Real_Time.Clock)
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    radar_system_receive_Interrogators.Store_Received_Message
     (Thread_Interface,
      From,
      Time_Stamp);
  end Store_Received_Message;

  ------------------------------
  -- Wait_For_Incoming_Events -- 
  ------------------------------

  procedure Wait_For_Incoming_Events
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : out radar_system_receiver_impl_Port_Type)
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    radar_system_receive_Interrogators.Wait_For_Incoming_Events
     (Port);
  end Wait_For_Incoming_Events;

  -----------------
  -- Send_Output -- 
  -----------------

  function Send_Output
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : radar_system_analyser_impl_Port_Type)
   return PolyORB_HI.Errors.Error_Kind
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    return radar_system_analyse_Interrogators.Send_Output
     (Port);
  end Send_Output;

  ---------------
  -- Put_Value -- 
  ---------------

  procedure Put_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Thread_Interface : radar_system_analyser_impl_Interface)
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    radar_system_analyse_Interrogators.Put_Value
     (Thread_Interface);
  end Put_Value;

  -------------------
  -- Receive_Input -- 
  -------------------

  procedure Receive_Input
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : radar_system_analyser_impl_Port_Type)
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    radar_system_analyse_Interrogators.Receive_Input
     (Port);
  end Receive_Input;

  ---------------
  -- Get_Value -- 
  ---------------

  function Get_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : radar_system_analyser_impl_Port_Type)
   return radar_system_analyser_impl_Interface
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    pragma Warnings
     (Off,
      "*return*");
    return radar_system_analyse_Interrogators.Get_Value
     (Port);
    pragma Warnings
     (On,
      "*return*");
  end Get_Value;

  ----------------
  -- Get_Sender -- 
  ----------------

  function Get_Sender
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : radar_system_analyser_impl_Port_Type)
   return PolyORB_HI_Generated.Deployment.Entity_Type
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    pragma Warnings
     (Off,
      "*return*");
    return radar_system_analyse_Interrogators.Get_Sender
     (Port);
    pragma Warnings
     (On,
      "*return*");
  end Get_Sender;

  ---------------
  -- Get_Count -- 
  ---------------

  function Get_Count
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : radar_system_analyser_impl_Port_Type)
   return Standard.Integer
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    pragma Warnings
     (Off,
      "*return*");
    return radar_system_analyse_Interrogators.Get_Count
     (Port);
    pragma Warnings
     (On,
      "*return*");
  end Get_Count;

  --------------------
  -- Get_Time_Stamp -- 
  --------------------

  function Get_Time_Stamp
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : radar_system_analyser_impl_Port_Type)
   return Ada.Real_Time.Time
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    pragma Warnings
     (Off,
      "*return*");
    return radar_system_analyse_Interrogators.Get_Time_Stamp
     (Port);
    pragma Warnings
     (On,
      "*return*");
  end Get_Time_Stamp;

  ----------------
  -- Next_Value -- 
  ----------------

  procedure Next_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : radar_system_analyser_impl_Port_Type)
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    radar_system_analyse_Interrogators.Next_Value
     (Port);
  end Next_Value;

  ----------------------------
  -- Store_Received_Message -- 
  ----------------------------

  procedure Store_Received_Message
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Thread_Interface : radar_system_analyser_impl_Interface;
    From : PolyORB_HI_Generated.Deployment.Entity_Type;
    Time_Stamp : Ada.Real_Time.Time :=
      Ada.Real_Time.Clock)
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    radar_system_analyse_Interrogators.Store_Received_Message
     (Thread_Interface,
      From,
      Time_Stamp);
  end Store_Received_Message;

  ------------------------------
  -- Wait_For_Incoming_Events -- 
  ------------------------------

  procedure Wait_For_Incoming_Events
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : out radar_system_analyser_impl_Port_Type)
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    radar_system_analyse_Interrogators.Wait_For_Incoming_Events
     (Port);
  end Wait_For_Incoming_Events;

  -----------------
  -- Send_Output -- 
  -----------------

  function Send_Output
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : radar_system_display_panel_impl_Port_Type)
   return PolyORB_HI.Errors.Error_Kind
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    return radar_system_display_Interrogators.Send_Output
     (Port);
  end Send_Output;

  ---------------
  -- Put_Value -- 
  ---------------

  procedure Put_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Thread_Interface : radar_system_display_panel_impl_Interface)
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    radar_system_display_Interrogators.Put_Value
     (Thread_Interface);
  end Put_Value;

  -------------------
  -- Receive_Input -- 
  -------------------

  procedure Receive_Input
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : radar_system_display_panel_impl_Port_Type)
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    radar_system_display_Interrogators.Receive_Input
     (Port);
  end Receive_Input;

  ---------------
  -- Get_Value -- 
  ---------------

  function Get_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : radar_system_display_panel_impl_Port_Type)
   return radar_system_display_panel_impl_Interface
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    pragma Warnings
     (Off,
      "*return*");
    return radar_system_display_Interrogators.Get_Value
     (Port);
    pragma Warnings
     (On,
      "*return*");
  end Get_Value;

  ----------------
  -- Get_Sender -- 
  ----------------

  function Get_Sender
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : radar_system_display_panel_impl_Port_Type)
   return PolyORB_HI_Generated.Deployment.Entity_Type
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    pragma Warnings
     (Off,
      "*return*");
    return radar_system_display_Interrogators.Get_Sender
     (Port);
    pragma Warnings
     (On,
      "*return*");
  end Get_Sender;

  ---------------
  -- Get_Count -- 
  ---------------

  function Get_Count
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : radar_system_display_panel_impl_Port_Type)
   return Standard.Integer
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    pragma Warnings
     (Off,
      "*return*");
    return radar_system_display_Interrogators.Get_Count
     (Port);
    pragma Warnings
     (On,
      "*return*");
  end Get_Count;

  --------------------
  -- Get_Time_Stamp -- 
  --------------------

  function Get_Time_Stamp
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : radar_system_display_panel_impl_Port_Type)
   return Ada.Real_Time.Time
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    pragma Warnings
     (Off,
      "*return*");
    return radar_system_display_Interrogators.Get_Time_Stamp
     (Port);
    pragma Warnings
     (On,
      "*return*");
  end Get_Time_Stamp;

  ----------------
  -- Next_Value -- 
  ----------------

  procedure Next_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : radar_system_display_panel_impl_Port_Type)
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    radar_system_display_Interrogators.Next_Value
     (Port);
  end Next_Value;

  ----------------------------
  -- Store_Received_Message -- 
  ----------------------------

  procedure Store_Received_Message
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Thread_Interface : radar_system_display_panel_impl_Interface;
    From : PolyORB_HI_Generated.Deployment.Entity_Type;
    Time_Stamp : Ada.Real_Time.Time :=
      Ada.Real_Time.Clock)
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    radar_system_display_Interrogators.Store_Received_Message
     (Thread_Interface,
      From,
      Time_Stamp);
  end Store_Received_Message;

  ------------------------------
  -- Wait_For_Incoming_Events -- 
  ------------------------------

  procedure Wait_For_Incoming_Events
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : out radar_system_display_panel_impl_Port_Type)
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    radar_system_display_Interrogators.Wait_For_Incoming_Events
     (Port);
  end Wait_For_Incoming_Events;

  -----------------
  -- Send_Output -- 
  -----------------

  function Send_Output
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : radar_system_transmitter_impl_Port_Type)
   return PolyORB_HI.Errors.Error_Kind
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    return radar_system_transmit_Interrogators.Send_Output
     (Port);
  end Send_Output;

  ---------------
  -- Put_Value -- 
  ---------------

  procedure Put_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Thread_Interface : radar_system_transmitter_impl_Interface)
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    radar_system_transmit_Interrogators.Put_Value
     (Thread_Interface);
  end Put_Value;

  -------------------
  -- Receive_Input -- 
  -------------------

  procedure Receive_Input
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : radar_system_transmitter_impl_Port_Type)
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    radar_system_transmit_Interrogators.Receive_Input
     (Port);
  end Receive_Input;

  ---------------
  -- Get_Value -- 
  ---------------

  function Get_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : radar_system_transmitter_impl_Port_Type)
   return radar_system_transmitter_impl_Interface
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    pragma Warnings
     (Off,
      "*return*");
    return radar_system_transmit_Interrogators.Get_Value
     (Port);
    pragma Warnings
     (On,
      "*return*");
  end Get_Value;

  ----------------
  -- Get_Sender -- 
  ----------------

  function Get_Sender
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : radar_system_transmitter_impl_Port_Type)
   return PolyORB_HI_Generated.Deployment.Entity_Type
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    pragma Warnings
     (Off,
      "*return*");
    return radar_system_transmit_Interrogators.Get_Sender
     (Port);
    pragma Warnings
     (On,
      "*return*");
  end Get_Sender;

  ---------------
  -- Get_Count -- 
  ---------------

  function Get_Count
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : radar_system_transmitter_impl_Port_Type)
   return Standard.Integer
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    pragma Warnings
     (Off,
      "*return*");
    return radar_system_transmit_Interrogators.Get_Count
     (Port);
    pragma Warnings
     (On,
      "*return*");
  end Get_Count;

  --------------------
  -- Get_Time_Stamp -- 
  --------------------

  function Get_Time_Stamp
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : radar_system_transmitter_impl_Port_Type)
   return Ada.Real_Time.Time
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    pragma Warnings
     (Off,
      "*return*");
    return radar_system_transmit_Interrogators.Get_Time_Stamp
     (Port);
    pragma Warnings
     (On,
      "*return*");
  end Get_Time_Stamp;

  ----------------
  -- Next_Value -- 
  ----------------

  procedure Next_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : radar_system_transmitter_impl_Port_Type)
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    radar_system_transmit_Interrogators.Next_Value
     (Port);
  end Next_Value;

  ----------------------------
  -- Store_Received_Message -- 
  ----------------------------

  procedure Store_Received_Message
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Thread_Interface : radar_system_transmitter_impl_Interface;
    From : PolyORB_HI_Generated.Deployment.Entity_Type;
    Time_Stamp : Ada.Real_Time.Time :=
      Ada.Real_Time.Clock)
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    radar_system_transmit_Interrogators.Store_Received_Message
     (Thread_Interface,
      From,
      Time_Stamp);
  end Store_Received_Message;

  ------------------------------
  -- Wait_For_Incoming_Events -- 
  ------------------------------

  procedure Wait_For_Incoming_Events
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : out radar_system_transmitter_impl_Port_Type)
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    radar_system_transmit_Interrogators.Wait_For_Incoming_Events
     (Port);
  end Wait_For_Incoming_Events;

  -----------------
  -- Send_Output -- 
  -----------------

  function Send_Output
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : radar_system_controller_impl_Port_Type)
   return PolyORB_HI.Errors.Error_Kind
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    return radar_system_control_angle_Interrogators.Send_Output
     (Port);
  end Send_Output;

  ---------------
  -- Put_Value -- 
  ---------------

  procedure Put_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Thread_Interface : radar_system_controller_impl_Interface)
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    radar_system_control_angle_Interrogators.Put_Value
     (Thread_Interface);
  end Put_Value;

  -------------------
  -- Receive_Input -- 
  -------------------

  procedure Receive_Input
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : radar_system_controller_impl_Port_Type)
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    radar_system_control_angle_Interrogators.Receive_Input
     (Port);
  end Receive_Input;

  ---------------
  -- Get_Value -- 
  ---------------

  function Get_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : radar_system_controller_impl_Port_Type)
   return radar_system_controller_impl_Interface
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    pragma Warnings
     (Off,
      "*return*");
    return radar_system_control_angle_Interrogators.Get_Value
     (Port);
    pragma Warnings
     (On,
      "*return*");
  end Get_Value;

  ----------------
  -- Get_Sender -- 
  ----------------

  function Get_Sender
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : radar_system_controller_impl_Port_Type)
   return PolyORB_HI_Generated.Deployment.Entity_Type
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    pragma Warnings
     (Off,
      "*return*");
    return radar_system_control_angle_Interrogators.Get_Sender
     (Port);
    pragma Warnings
     (On,
      "*return*");
  end Get_Sender;

  ---------------
  -- Get_Count -- 
  ---------------

  function Get_Count
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : radar_system_controller_impl_Port_Type)
   return Standard.Integer
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    pragma Warnings
     (Off,
      "*return*");
    return radar_system_control_angle_Interrogators.Get_Count
     (Port);
    pragma Warnings
     (On,
      "*return*");
  end Get_Count;

  --------------------
  -- Get_Time_Stamp -- 
  --------------------

  function Get_Time_Stamp
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : radar_system_controller_impl_Port_Type)
   return Ada.Real_Time.Time
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    pragma Warnings
     (Off,
      "*return*");
    return radar_system_control_angle_Interrogators.Get_Time_Stamp
     (Port);
    pragma Warnings
     (On,
      "*return*");
  end Get_Time_Stamp;

  ----------------
  -- Next_Value -- 
  ----------------

  procedure Next_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : radar_system_controller_impl_Port_Type)
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    radar_system_control_angle_Interrogators.Next_Value
     (Port);
  end Next_Value;

  ----------------------------
  -- Store_Received_Message -- 
  ----------------------------

  procedure Store_Received_Message
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Thread_Interface : radar_system_controller_impl_Interface;
    From : PolyORB_HI_Generated.Deployment.Entity_Type;
    Time_Stamp : Ada.Real_Time.Time :=
      Ada.Real_Time.Clock)
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    radar_system_control_angle_Interrogators.Store_Received_Message
     (Thread_Interface,
      From,
      Time_Stamp);
  end Store_Received_Message;

  ------------------------------
  -- Wait_For_Incoming_Events -- 
  ------------------------------

  procedure Wait_For_Incoming_Events
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : out radar_system_controller_impl_Port_Type)
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    radar_system_control_angle_Interrogators.Wait_For_Incoming_Events
     (Port);
  end Wait_For_Incoming_Events;

end PolyORB_HI_Generated.Activity;
