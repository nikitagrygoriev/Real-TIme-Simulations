--------------------------------------------------------
--  This file was automatically generated by Ocarina  --
--  Do NOT hand-modify this file, as your             --
--  changes will be lost when you re-run Ocarina      --
--------------------------------------------------------
pragma Style_Checks
 ("NM32766");

with PolyORB_HI_Generated.Types;
with PolyORB_HI.Errors;
with PolyORB_HI_Generated.Deployment;
with Ada.Real_Time;
with PolyORB_HI.Periodic_Task;
pragma Elaborate_All (PolyORB_HI.Periodic_Task);

package PolyORB_HI_Generated.Activity is

  --  BEGIN: Entities used by all instances of component receiver.impl

  type radar_system_receiver_impl_Port_Type is
   (receiver_out,
    receiver_in);

  type radar_system_receiver_impl_Interface 
   (Port : radar_system_receiver_impl_Port_Type := radar_system_receiver_impl_Port_Type'First)
  is
    record
      case Port is
        when receiver_out =>
          receiver_out_DATA : PolyORB_HI_Generated.Types.Target_Distance;
        when receiver_in =>
          receiver_in_DATA : PolyORB_HI_Generated.Types.Target_Distance;
        pragma Warnings (Off);
        when others =>
          null;
        pragma Warnings (On);
      end case;
    end record;

  function Send_Output
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : radar_system_receiver_impl_Port_Type)
   return PolyORB_HI.Errors.Error_Kind;

  procedure Put_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Thread_Interface : radar_system_receiver_impl_Interface);

  procedure Receive_Input
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : radar_system_receiver_impl_Port_Type);

  function Get_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : radar_system_receiver_impl_Port_Type)
   return radar_system_receiver_impl_Interface;

  function Get_Sender
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : radar_system_receiver_impl_Port_Type)
   return PolyORB_HI_Generated.Deployment.Entity_Type;

  function Get_Count
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : radar_system_receiver_impl_Port_Type)
   return Standard.Integer;

  function Get_Time_Stamp
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : radar_system_receiver_impl_Port_Type)
   return Ada.Real_Time.Time;

  procedure Next_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : radar_system_receiver_impl_Port_Type);

  procedure Store_Received_Message
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Thread_Interface : radar_system_receiver_impl_Interface;
    From : PolyORB_HI_Generated.Deployment.Entity_Type;
    Time_Stamp : Ada.Real_Time.Time :=
      Ada.Real_Time.Clock);

  procedure Wait_For_Incoming_Events
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : out radar_system_receiver_impl_Port_Type);

  --  END: Entities used by all instances of component receiver.impl

  --  Periodic task : receive

  function radar_system_receive_Job return PolyORB_HI.Errors.Error_Kind;

  package radar_system_receive_Task is
   new PolyORB_HI.Periodic_Task
     (Entity => PolyORB_HI_Generated.Deployment.main_receive_K,
      Task_Period => Ada.Real_Time.Milliseconds
       (1500),
      Task_Deadline => Ada.Real_Time.Milliseconds
       (150),
      Task_Priority => 63,
      Task_Stack_Size => 100000,
      Job => radar_system_receive_Job);

  --  BEGIN: Entities used by all instances of component analyser.impl

  type radar_system_analyser_impl_Port_Type is
   (from_transmitter,
    from_receiver,
    analyser_out,
    from_controller);

  type radar_system_analyser_impl_Interface 
   (Port : radar_system_analyser_impl_Port_Type := radar_system_analyser_impl_Port_Type'First)
  is
    record
      case Port is
        when from_transmitter =>
          null;
        when from_receiver =>
          from_receiver_DATA : PolyORB_HI_Generated.Types.Target_Distance;
        when analyser_out =>
          analyser_out_DATA : PolyORB_HI_Generated.Types.Target_Position_impl;
        when from_controller =>
          from_controller_DATA : PolyORB_HI_Generated.Types.Motor_Position;
        pragma Warnings (Off);
        when others =>
          null;
        pragma Warnings (On);
      end case;
    end record;

  function Send_Output
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : radar_system_analyser_impl_Port_Type)
   return PolyORB_HI.Errors.Error_Kind;

  procedure Put_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Thread_Interface : radar_system_analyser_impl_Interface);

  procedure Receive_Input
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : radar_system_analyser_impl_Port_Type);

  function Get_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : radar_system_analyser_impl_Port_Type)
   return radar_system_analyser_impl_Interface;

  function Get_Sender
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : radar_system_analyser_impl_Port_Type)
   return PolyORB_HI_Generated.Deployment.Entity_Type;

  function Get_Count
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : radar_system_analyser_impl_Port_Type)
   return Standard.Integer;

  function Get_Time_Stamp
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : radar_system_analyser_impl_Port_Type)
   return Ada.Real_Time.Time;

  procedure Next_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : radar_system_analyser_impl_Port_Type);

  procedure Store_Received_Message
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Thread_Interface : radar_system_analyser_impl_Interface;
    From : PolyORB_HI_Generated.Deployment.Entity_Type;
    Time_Stamp : Ada.Real_Time.Time :=
      Ada.Real_Time.Clock);

  procedure Wait_For_Incoming_Events
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : out radar_system_analyser_impl_Port_Type);

  --  END: Entities used by all instances of component analyser.impl

  --  Periodic task : analyse

  function radar_system_analyse_Job return PolyORB_HI.Errors.Error_Kind;

  package radar_system_analyse_Task is
   new PolyORB_HI.Periodic_Task
     (Entity => PolyORB_HI_Generated.Deployment.main_analyse_K,
      Task_Period => Ada.Real_Time.Milliseconds
       (5000),
      Task_Deadline => Ada.Real_Time.Milliseconds
       (500),
      Task_Priority => 62,
      Task_Stack_Size => 100000,
      Job => radar_system_analyse_Job);

  --  BEGIN: Entities used by all instances of component display_panel.impl

  type radar_system_display_panel_impl_Port_Type is
   (display_in,
    display_out);

  type radar_system_display_panel_impl_Interface 
   (Port : radar_system_display_panel_impl_Port_Type := radar_system_display_panel_impl_Port_Type'First)
  is
    record
      case Port is
        when display_in =>
          display_in_DATA : PolyORB_HI_Generated.Types.Target_Position_impl;
        when display_out =>
          null;
        pragma Warnings (Off);
        when others =>
          null;
        pragma Warnings (On);
      end case;
    end record;

  function Send_Output
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : radar_system_display_panel_impl_Port_Type)
   return PolyORB_HI.Errors.Error_Kind;

  procedure Put_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Thread_Interface : radar_system_display_panel_impl_Interface);

  procedure Receive_Input
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : radar_system_display_panel_impl_Port_Type);

  function Get_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : radar_system_display_panel_impl_Port_Type)
   return radar_system_display_panel_impl_Interface;

  function Get_Sender
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : radar_system_display_panel_impl_Port_Type)
   return PolyORB_HI_Generated.Deployment.Entity_Type;

  function Get_Count
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : radar_system_display_panel_impl_Port_Type)
   return Standard.Integer;

  function Get_Time_Stamp
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : radar_system_display_panel_impl_Port_Type)
   return Ada.Real_Time.Time;

  procedure Next_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : radar_system_display_panel_impl_Port_Type);

  procedure Store_Received_Message
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Thread_Interface : radar_system_display_panel_impl_Interface;
    From : PolyORB_HI_Generated.Deployment.Entity_Type;
    Time_Stamp : Ada.Real_Time.Time :=
      Ada.Real_Time.Clock);

  procedure Wait_For_Incoming_Events
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : out radar_system_display_panel_impl_Port_Type);

  --  END: Entities used by all instances of component display_panel.impl

  --  Periodic task : display

  function radar_system_display_Job return PolyORB_HI.Errors.Error_Kind;

  package radar_system_display_Task is
   new PolyORB_HI.Periodic_Task
     (Entity => PolyORB_HI_Generated.Deployment.main_display_K,
      Task_Period => Ada.Real_Time.Milliseconds
       (2000),
      Task_Deadline => Ada.Real_Time.Milliseconds
       (200),
      Task_Priority => 60,
      Task_Stack_Size => 100000,
      Job => radar_system_display_Job);

  --  BEGIN: Entities used by all instances of component transmitter.impl

  type radar_system_transmitter_impl_Port_Type is
   (transmitter_out);

  type radar_system_transmitter_impl_Interface 
   (Port : radar_system_transmitter_impl_Port_Type := radar_system_transmitter_impl_Port_Type'First)
  is
    record
      case Port is
        when transmitter_out =>
          null;
        pragma Warnings (Off);
        when others =>
          null;
        pragma Warnings (On);
      end case;
    end record;

  function Send_Output
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : radar_system_transmitter_impl_Port_Type)
   return PolyORB_HI.Errors.Error_Kind;

  procedure Put_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Thread_Interface : radar_system_transmitter_impl_Interface);

  procedure Receive_Input
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : radar_system_transmitter_impl_Port_Type);

  function Get_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : radar_system_transmitter_impl_Port_Type)
   return radar_system_transmitter_impl_Interface;

  function Get_Sender
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : radar_system_transmitter_impl_Port_Type)
   return PolyORB_HI_Generated.Deployment.Entity_Type;

  function Get_Count
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : radar_system_transmitter_impl_Port_Type)
   return Standard.Integer;

  function Get_Time_Stamp
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : radar_system_transmitter_impl_Port_Type)
   return Ada.Real_Time.Time;

  procedure Next_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : radar_system_transmitter_impl_Port_Type);

  procedure Store_Received_Message
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Thread_Interface : radar_system_transmitter_impl_Interface;
    From : PolyORB_HI_Generated.Deployment.Entity_Type;
    Time_Stamp : Ada.Real_Time.Time :=
      Ada.Real_Time.Clock);

  procedure Wait_For_Incoming_Events
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : out radar_system_transmitter_impl_Port_Type);

  --  END: Entities used by all instances of component transmitter.impl

  --  Periodic task : transmit

  function radar_system_transmit_Job return PolyORB_HI.Errors.Error_Kind;

  package radar_system_transmit_Task is
   new PolyORB_HI.Periodic_Task
     (Entity => PolyORB_HI_Generated.Deployment.main_transmit_K,
      Task_Period => Ada.Real_Time.Milliseconds
       (500),
      Task_Deadline => Ada.Real_Time.Milliseconds
       (50),
      Task_Priority => 71,
      Task_Stack_Size => 100000,
      Job => radar_system_transmit_Job);

  --  BEGIN: Entities used by all instances of component controller.impl

  type radar_system_controller_impl_Port_Type is
   (controller_in,
    controller_out);

  type radar_system_controller_impl_Interface 
   (Port : radar_system_controller_impl_Port_Type := radar_system_controller_impl_Port_Type'First)
  is
    record
      case Port is
        when controller_in =>
          controller_in_DATA : PolyORB_HI_Generated.Types.Motor_Position;
        when controller_out =>
          controller_out_DATA : PolyORB_HI_Generated.Types.Motor_Position;
        pragma Warnings (Off);
        when others =>
          null;
        pragma Warnings (On);
      end case;
    end record;

  function Send_Output
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : radar_system_controller_impl_Port_Type)
   return PolyORB_HI.Errors.Error_Kind;

  procedure Put_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Thread_Interface : radar_system_controller_impl_Interface);

  procedure Receive_Input
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : radar_system_controller_impl_Port_Type);

  function Get_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : radar_system_controller_impl_Port_Type)
   return radar_system_controller_impl_Interface;

  function Get_Sender
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : radar_system_controller_impl_Port_Type)
   return PolyORB_HI_Generated.Deployment.Entity_Type;

  function Get_Count
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : radar_system_controller_impl_Port_Type)
   return Standard.Integer;

  function Get_Time_Stamp
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : radar_system_controller_impl_Port_Type)
   return Ada.Real_Time.Time;

  procedure Next_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : radar_system_controller_impl_Port_Type);

  procedure Store_Received_Message
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Thread_Interface : radar_system_controller_impl_Interface;
    From : PolyORB_HI_Generated.Deployment.Entity_Type;
    Time_Stamp : Ada.Real_Time.Time :=
      Ada.Real_Time.Clock);

  procedure Wait_For_Incoming_Events
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : out radar_system_controller_impl_Port_Type);

  --  END: Entities used by all instances of component controller.impl

  --  Periodic task : control_angle

  function radar_system_control_angle_Job return PolyORB_HI.Errors.Error_Kind;

  package radar_system_control_angle_Task is
   new PolyORB_HI.Periodic_Task
     (Entity => PolyORB_HI_Generated.Deployment.main_control_angle_K,
      Task_Period => Ada.Real_Time.Milliseconds
       (1500),
      Task_Deadline => Ada.Real_Time.Milliseconds
       (150),
      Task_Priority => 70,
      Task_Stack_Size => 100000,
      Job => radar_system_control_angle_Job);

end PolyORB_HI_Generated.Activity;
