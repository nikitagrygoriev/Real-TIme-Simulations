package radar_system
public
	with radar_types;
--	with cheddar_properties;
	with deployment;

	SYSTEM radar
	END radar;
	
	-- Implementacja systemu składa się z urządzeń fizycznych (sprzęt):
	-- antena + procesor + pamięć + magistrala 
	-- i z oprogramowania: uruchomione procesy i wątki + funkcjonalności systemu operacyjnego
	-- (planowanie) zaimplementowane w procesorze, które jednocześnie stanowią część platformy wykonawczej
	-- i urządzeń fizycznych.
	SYSTEM IMPLEMENTATION radar.simple
		SUBCOMPONENTS
			aerial: DEVICE antenna;
			rotor: DEVICE motor;
			monitor: DEVICE screen;
			main: PROCESS processing.others;
			cpu: PROCESSOR leon2;
			VME: BUS VME;
			RAM: MEMORY RAM;
		CONNECTIONS
			A1: PORT aerial.antenna_out -> main.receive_pulse;
			A2: PORT rotor.motor_out -> main.get_angle;
			A3: PORT main.send_pulse -> aerial.antenna_in;
			A4: PORT main.to_screen -> monitor.screen_in;
			A5: BUS ACCESS VME -> aerial.VME;
			A6: BUS ACCESS VME -> rotor.VME;
			A7: BUS ACCESS VME -> monitor.VME;
			A8: BUS ACCESS VME -> cpu.VME;
			A9: BUS ACCESS VME -> RAM.VME;
		PROPERTIES
			Actual_Memory_Binding => (reference (ram)) applies to main;
			Actual_Processor_Binding => (reference (cpu)) applies to main;
	END radar.simple;
	
	-- Antena symuluje środowisko radarowe.
	-- Impuls jest wyzwalany przez odbiór sygnału z nadajnika.
	-- Wewnętrzna logika ocenia opóźnienie impulsu echa i wyzwala wysyłanie sygnału
	-- do odbiornika.
	DEVICE antenna
		FEATURES
			antenna_in: IN EVENT PORT;	
			-- Port podłączony do głównego procesu: przetwarzanie sygnału
			antenna_out: OUT DATA PORT radar_types::Target_Distance;
			VME: REQUIRES BUS ACCESS VME;
		PROPERTIES
			Compute_Execution_Time => 1ms .. 2ms;
			Deadline => 1ms;
			Period => 1ms;
	END antenna;

	DEVICE motor
		FEATURES
			motor_out: OUT DATA PORT radar_types::Motor_Position;
			VME: REQUIRES BUS ACCESS VME;
		PROPERTIES
			Compute_Execution_Time => 1ms .. 2ms;
			Deadline => 1ms;
			Period => 1ms;
	END motor;

	DEVICE screen
		FEATURES
			screen_in: IN EVENT PORT;
			VME: REQUIRES BUS ACCESS VME;
		PROPERTIES
			Compute_Execution_Time => 1ms .. 2ms;
			Deadline => 1ms;
			Period => 1ms;
	END screen;

	-- Główny proces odpowiada za przetwarzanie sygnałów:
	-- Ogólny wzorzec to: nadajnik -> antena -> odbiornik -> analizator -> wyświetlacz
	PROCESS processing
		FEATURES
			to_screen: OUT EVENT PORT;
			send_pulse: OUT EVENT PORT;
			receive_pulse: IN DATA PORT radar_types::Target_Distance;
			get_angle: IN DATA PORT radar_types::Motor_Position;
	END processing;

	PROCESS IMPLEMENTATION processing.others
		SUBCOMPONENTS
			receive: THREAD receiver.impl;
			analyse: THREAD analyser.impl;
			display: THREAD display_panel.impl;
			transmit: THREAD transmitter.impl;
			control_angle: THREAD controller.impl;
		CONNECTIONS
			A10: PORT receive_pulse -> receive.receiver_in;
			A11: PORT display.display_out -> to_screen;
			A12: PORT transmit.transmitter_out -> send_pulse;
			A13: PORT get_angle -> control_angle.controller_in;
			A14: PORT receive.receiver_out -> analyse.from_receiver;
			A15: PORT analyse.analyser_out -> display.display_in;
			A16: PORT transmit.transmitter_out -> analyse.from_transmitter;
			A17: PORT control_angle.controller_out -> analyse.from_controller;
	END processing.others;
	
	-- Ten wątek odbiera echa radaru z anteny.
	THREAD receiver
		FEATURES
			receiver_out: OUT DATA PORT radar_types::Target_Distance;
			receiver_in: IN DATA PORT radar_types::Target_Distance;
	END receiver;

	THREAD IMPLEMENTATION receiver.impl
		CALLS
			CS: {
				RS: SUBPROGRAM Receiver_Spg;
			};
		CONNECTIONS
			A18: PARAMETER RS.receiver_out -> receiver_out;
			A19: PARAMETER receiver_in -> RS.receiver_in;
		PROPERTIES
--			Cheddar_Properties::Fixed_Priority => 63;
			Dispatch_Protocol => Periodic;
			Compute_Execution_Time => 10ms .. 20ms;
			Deadline => 150ms;
			Period => 1500ms;
	END receiver.impl;

	SUBPROGRAM Receiver_Spg
		FEATURES
			receiver_out: OUT PARAMETER radar_types::Target_Distance;
			receiver_in: IN PARAMETER radar_types::Target_Distance;
		properties
			Source_Language => (Ada95);
			Source_Name => "radar.receiver";
	END Receiver_Spg;
	
	-- Wątek ten porównuje przesyłane i odbierane sygnały w celu wykrywania, 
	-- lokalizacji i identyfikacji.
	THREAD analyser
		FEATURES
			from_transmitter: IN EVENT PORT;
			from_receiver: IN DATA PORT radar_types::Target_Distance;
			analyser_out: OUT DATA PORT radar_types::Target_Position.Impl;
			from_controller: IN DATA PORT radar_types::Motor_Position;
	END analyser;

	THREAD IMPLEMENTATION analyser.impl
		CALLS
			CS: {
				AS: SUBPROGRAM Analyser_Spg;
			};
		CONNECTIONS
			A20: PARAMETER from_receiver -> AS.from_receiver;
			A21: PARAMETER AS.analyser_out -> analyser_out;
			A22: PARAMETER from_controller -> AS.from_controller;
		PROPERTIES
--			Cheddar_Properties::Fixed_Priority => 62;
			Dispatch_Protocol => Periodic;
			Compute_Execution_Time => 40ms .. 60ms;
			Deadline => 500ms;
			Period => 5000ms;
	END analyser.impl;

	SUBPROGRAM Analyser_Spg
		FEATURES
			from_receiver: IN PARAMETER radar_types::Target_Distance;
			analyser_out: OUT PARAMETER radar_types::Target_Position.Impl;
			from_controller: IN PARAMETER radar_types::Motor_Position;
		properties
			Source_Language => (Ada95);
			Source_Name => "radar.analyser";
	END Analyser_Spg;
	
	-- Wątek ten odpowiada za formatowanie i wyświetlanie przetworzonych sygnałów
	THREAD display_panel
		FEATURES
			display_in: IN DATA PORT radar_types::Target_Position.Impl;
			display_out: OUT EVENT PORT;
	END display_panel;

	THREAD IMPLEMENTATION display_panel.impl
		CALLS
			CS: {
				DS: SUBPROGRAM Display_Spg;
			};
		CONNECTIONS
			A23: PARAMETER display_in -> DS.display_in;
		PROPERTIES
--			Cheddar_Properties::Fixed_Priority => 60;
			Dispatch_Protocol => Periodic;
			Compute_Execution_Time => 10ms .. 30ms;
			Deadline => 200ms;
			Period => 2000ms;
	END display_panel.impl;

	SUBPROGRAM Display_Spg
		FEATURES
			display_in: IN PARAMETER radar_types::Target_Position.Impl;
		properties
			Source_Language => (Ada95);
			Source_Name => "radar.display_panel";
	END Display_Spg;

	-- Ten wątek wysyła sygnały radarowe do anteny.
	THREAD transmitter
		FEATURES
			transmitter_out: OUT EVENT PORT;
	END transmitter;

	THREAD IMPLEMENTATION transmitter.impl
		PROPERTIES
--			Cheddar_Properties::Fixed_Priority => 71;
			Dispatch_Protocol => Periodic;
			Compute_Execution_Time => 10ms .. 10ms;
			Compute_Entrypoint_Source_Text => "radar.transmitter";
			Deadline => 50ms;
			Period => 500ms;
	END transmitter.impl;

	THREAD controller
		FEATURES
			controller_in: IN DATA PORT radar_types::Motor_Position;
			controller_out: OUT DATA PORT radar_types::Motor_Position;
	END controller;

	THREAD IMPLEMENTATION controller.impl
		CALLS
			CS1: {
				CS: SUBPROGRAM Controller_Spg;
			};
		CONNECTIONS
			A24: PARAMETER controller_in -> CS.controller_in;
			A25: PARAMETER CS.controller_out -> controller_out;
		PROPERTIES
--			Cheddar_Properties::Fixed_Priority => 70;
			Dispatch_Protocol => Periodic;
			Compute_Execution_Time => 10ms .. 10ms;
			Deadline => 150ms;
			Period => 1500ms;
	END controller.impl;

	SUBPROGRAM Controller_Spg
		FEATURES
			controller_in: IN PARAMETER radar_types::Motor_Position;
			controller_out: OUT PARAMETER radar_types::Motor_Position;
		properties
			Source_Language => (Ada95);
			Source_Name => "radar.controller";
	END Controller_Spg;
	
	-- Procesor reprezentuje abstrakcję sprzętu i oprogramowania (OS) 
	-- odpowiedzialną za planowanie i wykonywanie wątków 
	-- (może obejmować funkcje zapewniane przez systemy operacyjne, 
	-- takie jak, w naszym przypadku, protokół planowania).
	PROCESSOR leon2
		FEATURES
			VME: REQUIRES BUS ACCESS VME;
		PROPERTIES
			Clock_Period => 200ns;
			Scheduling_Protocol => (Posix_1003_Highest_Priority_First_Protocol);
			Deployment::Execution_Platform => LEON_ORK;
			Priority_Range => 0 .. 255;
	END leon2;
	
	-- Magistrala zapewnia komunikację między anteną a głównym procesem
	-- przechowywanym w pamięci
	BUS VME
	END VME;
	
	-- Pamięć zawiera przestrzeń adresową głównego procesu.
	MEMORY RAM
		FEATURES
			VME: REQUIRES BUS ACCESS VME;
	END RAM;

end radar_system;